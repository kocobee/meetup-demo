import { MdxJsxFlowElement, MdxJsxTextElement } from 'mdast-util-mdx';
import type { Parent, Node, Root } from 'mdast';
export declare const createBaseProcessor: () => import("unified").Processor<Root, undefined, undefined, undefined, undefined>;
export declare function isMdxJsxElement(node: Node): node is MdxJsxFlowElement | MdxJsxTextElement;
export declare function isMdxJsxFlowElement(node: Node): node is MdxJsxFlowElement;
export declare function isMdxJsxTextElement(node: Node): node is MdxJsxTextElement;
export declare function isParentNode(node: Node): node is Parent;
export declare function compressAst(node: any): void;
export declare const getFrontMatter: (tree: Root) => unknown;
export declare function parse(mdxContent: string): Root;
export declare const stringify: (tree: Root) => string;
export declare function hasFunctionBody(childNode: Node): boolean;
export declare function getFunctionBody(childNode: Node): {
    body: Node[];
    argumentNames: string[];
};
