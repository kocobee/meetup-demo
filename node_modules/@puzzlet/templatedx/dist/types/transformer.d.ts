import jsep from 'jsep';
import { MdxJsxFlowElement, MdxJsxTextElement } from 'mdast-util-mdx';
import { Scope } from './scope';
import type { Root, Node } from 'mdast';
export declare class NodeTransformer {
    private scope;
    constructor(scope: Scope);
    transformNode(node: Node): Promise<Node | Node[]>;
    private isFragmentNode;
    evaluateExpressionNode(node: Node): Node;
    resolveExpression(expression: string): any;
    evaluateJsepExpression(node: jsep.Expression): any;
    evaluateArrayExpression(node: jsep.ArrayExpression): any[];
    evaluateObjectExpression(node: any): object;
    evaluateCallExpression(node: jsep.CallExpression): any;
    resolveVariable(variablePath: string): any;
    evaluateBinaryExpression(node: jsep.BinaryExpression): any;
    evaluateUnaryExpression(node: jsep.UnaryExpression): any;
    evaluateMemberExpression(node: jsep.MemberExpression): any;
    processMdxJsxElement(node: MdxJsxFlowElement | MdxJsxTextElement): Promise<Node | Node[]>;
    evaluateProps(node: any): Record<string, any>;
}
export declare const transformTree: (tree: Root, props?: Record<string, any>, shared?: Record<string, any>) => Promise<Root>;
