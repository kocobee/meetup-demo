export class Scope {
    constructor(variables = {}, shared, parent) {
        this.variables = variables;
        // shared = global scope
        this.shared = shared;
        this.parent = parent;
    }
    get(key) {
        if (key in this.variables) {
            return this.variables[key];
        }
        else if (this.parent) {
            return this.parent.get(key);
        }
        else if (key in this.shared) {
            return this.shared[key];
        }
        else {
            return undefined;
        }
    }
    getLocal(key) {
        return this.variables[key];
    }
    getShared(key) {
        return this.shared[key];
    }
    setShared(key, value) {
        this.shared[key] = value;
    }
    setLocal(key, value) {
        this.variables[key] = value;
    }
    createChild(variables = {}) {
        return new Scope(variables, this.shared, this);
    }
}
//# sourceMappingURL=scope.js.map